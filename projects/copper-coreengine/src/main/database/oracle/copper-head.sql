CREATE OR REPLACE PACKAGE COP_COREENGINE AS

PROCEDURE enqueue(i_MAX IN NUMBER, o_ROWCOUNT OUT NUMBER);

PROCEDURE restart(i_WORKFLOW_INSTANCE_ID IN VARCHAR2);

PROCEDURE restart_all;

PROCEDURE restartFiltered(ERROR IN NUMBER, INVALID IN NUMBER, CLASS IN VARCHAR2,
    LASTMOD_TO IN TIMESTAMP, LASTMOD_FROM IN TIMESTAMP, CREATED_TO IN TIMESTAMP, CREATED_FROM IN TIMESTAMP, rowcountOut OUT NUMBER);

PROCEDURE trigger_failover(i_FAILED_ENGINE_ID IN VARCHAR);

PROCEDURE deleteBrokenWorkflow(i_WORKFLOW_INSTANCE_ID IN VARCHAR2, o_ROWCOUNT OUT NUMBER);

PROCEDURE deleteWaitingWorkflow(i_WORKFLOW_INSTANCE_ID IN VARCHAR2, o_ROWCOUNT OUT NUMBER);

PROCEDURE deleteFiltered(WAITING IN NUMBER, ERROR IN NUMBER, INVALID IN NUMBER, CLASS IN VARCHAR2,
    LASTMOD_TO IN TIMESTAMP, LASTMOD_FROM IN TIMESTAMP, CREATED_TO IN TIMESTAMP, CREATED_FROM IN TIMESTAMP, rowcountOut OUT NUMBER);

PROCEDURE acquire_lock(
	i_LOCK_ID IN VARCHAR2,
	i_CORRELATION_ID IN VARCHAR2,
	i_WORKFLOW_INSTANCE_ID IN VARCHAR2,
	o_CORRELATION_ID OUT VARCHAR2,
	o_result_code OUT NUMBER,
	o_result_msg OUT VARCHAR2
	);

PROCEDURE release_lock(
	i_LOCK_ID IN VARCHAR2,
	i_WORKFLOW_INSTANCE_ID IN VARCHAR2,
	o_CORRELATION_ID OUT VARCHAR2,
	o_result_code OUT NUMBER,
	o_result_msg OUT VARCHAR2
	);	
/*
PROCEDURE do_heartbeat(i_ENGINE_ID IN VARCHAR);
*/

END;
/
