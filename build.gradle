import groovy.xml.QName

import java.nio.charset.StandardCharsets

wrapper {
    gradleVersion = '4.7'
    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
}

if(!hasProperty('javaCompatibility')) {
    ext.javaCompatibility = 8
}
ext {
    javaVersion = (System.properties['java.specification.version'] ?: 1.0) as double
    if(1.2 <= javaVersion && javaVersion < 2) {
        javaVersion = ((int)(10 * javaVersion)) % 10
    } else {
        javaVersion = (int)javaVersion
    }
    if(javaVersion < (javaCompatibility as int)) {
        throw new GradleException("Cannot generate java-$javaCompatibility compatible code using a java-$javaVersion compiler")
    }
	slf4jVersion = "1.7.21"
	springVersion = '5.0.5.RELEASE'
	c3p0Version = '0.9.5.2'
	asmVersion = '6.1.1'
	guavaVersion = '24.1-jre'
	jacksonVersion = '2.8.4'
	cassandraDriverVersion = '3.4.0'
	snakeyamlVersion = '1.17'
	commonsIoVersion = '2.5'
}

buildscript {
    repositories {
        jcenter() // needed for gradle-nexus-plugin
        mavenCentral() // needed for nexus-workflow plugin
        maven { // needed for license-gradle-plugin
	      url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
        // The nexus plugin makes uploading to Sonatype Nexus repository easier.
        // See https://github.com/bmuschko/gradle-nexus-plugin for documentation
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7'
        // The nexus-workflow plugin automates the staging/promotion/release process on Sonatype OSS
        // by providing the task 'nexusStagingRelease'.
        // See https://github.com/adaptivecomputing/plugins-gradle/tree/master/nexus-workflow
        // and http://stackoverflow.com/questions/20432907/automated-release-to-maven-central-with-gradle
        classpath 'com.adaptc.gradle:nexus-workflow:0.6'
        // the license plugin, see https://github.com/hierynomus/license-gradle-plugin
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.0'
        // the spotbugs plugin, see https://plugins.gradle.org/plugin/com.github.spotbugs
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.1"
        // the task-tree plugin: https://github.com/dorongold/gradle-task-tree
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
    }
}


allprojects {
    apply plugin: 'project-report'
    apply plugin: "com.github.spotbugs"
    apply plugin: com.dorongold.gradle.tasktree.TaskTreePlugin

    group = "org.copper-engine"

    repositories {
        mavenCentral()
    }
}

def getProperSubprojects() {
    subprojects.findAll {
        new File(it.projectDir, 'src/main/java').directory
    }
}

configure(properSubprojects) {
    println "configuring java module " + project.path

    apply plugin: 'java-library'
    apply plugin: 'osgi'
    compileJava.options.encoding = StandardCharsets.UTF_8
    compileTestJava.options.encoding = StandardCharsets.UTF_8

    apply plugin: 'maven'
    task createSourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task createJavadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives createSourcesJar
        archives createJavadocJar
    }

    spotbugs {
        toolVersion = '3.1.3'
        sourceSets = (javaVersion >= 10) ? [] : [project.sourceSets.main]// check only main classes, neither tests nor example workflow classes
        excludeFilter = file("$rootDir/common/findbugs-exclude-filter.xml")
        effort = "max"
        ignoreFailures = true
    }

    spotbugsMain {
        reports {
            // Unfortunately FindBugs cannot emit both XML and HTML report simultanously, so by default we emit HTML only.
            // We emit XML only when -PfindbugsXmlReportEnabled=true, e.g. during Jenkins build
            def findbugsXmlReportEnabled = project.hasProperty('findbugsXmlReportEnabled') && project.property('findbugsXmlReportEnabled')
            xml.enabled = findbugsXmlReportEnabled
            html.enabled = !findbugsXmlReportEnabled
        }
    }

    spotbugsTest.enabled = false


    if (!project.getName().contains('orch-interfaces')) {
        apply plugin: 'com.github.hierynomus.license'
        license {
            // verify that every java file has our Apache License header; fail build if header is missing
            header file("$rootDir/common/apache-license-file.txt")
            skipExistingHeaders true
            ignoreFailures true
        }
    }

    apply plugin: 'eclipse'
    eclipse {
        classpath {
            defaultOutputDir = file('build')
            file {
                //exclude slf4f log binding from export
                withXml {
                    Node root = it.asNode()
                    NodeList nodeList = root.getAt(new QName('classpathentry'))
                    nodeList.each { Node classpathentry ->
                        if (classpathentry.attributes().path.contains('slf4j-log4j12')) {
                            classpathentry.attributes().remove('exported')
                        }
                    }
                }
            }
        }
        jdt {
            file {
                // add our code style settings to every eclipse project
                withProperties { properties ->
                    def codestyle = new XmlParser().parse(file("$rootDir/common/eclipse-codestyle.xml"))
                    codestyle.profile[0].setting.each {
                        properties.put(it.'@id', it.'@value')
                    }
                }
                whenMerged {
                    def uiprops = new Properties();
                    uiprops.put('eclipse.preferences.version', '1')
                    uiprops.put('formatter_profile', '_SCOOP-CodeStyle')
                    uiprops.put('formatter_settings_version', '12')
                    uiprops.store(file("$projectDir/.settings/org.eclipse.jdt.ui.prefs").newWriter(), "generated by build.gradle")
                }
            }
        }
    }
    // be sure to always regenerate eclipse files, because default behavior is merging into existing files
    tasks.eclipse.dependsOn cleanEclipse
    eclipse.classpath.defaultOutputDir = new File("$buildDir/classes/main")

    dependencies {
        implementation	"org.slf4j:slf4j-api:$slf4jVersion"
        testImplementation('junit:junit:4.11') {
            exclude module: 'hamcrest-core'
        }
        testImplementation 'org.mockito:mockito-all:1.9.5'

        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    javadoc {
        options.encoding = StandardCharsets.UTF_8
    }

    if (project.hasProperty('secretKeyRingFileSourceURL')) {
        // the nexus plugin makes uploading to Sonatype Nexus repository easier
        // see https://github.com/bmuschko/gradle-nexus-plugin for documentation
        apply plugin: 'nexus'
        nexus {
            attachTests = true
            sign = true
        }

        // task to fetch the GPG key to sign the JAR archives
        // we put the key to build/secring.gpg where it will be picked up by the uploadArchives task of the nexus plugin
        task fetchSecretKeyRingFile << {
            file(secretKeyRingFileDestFile).getParentFile().mkdirs()
            ant.get(src: secretKeyRingFileSourceURL, dest: secretKeyRingFileDestFile, username: secretKeyRingFileSourceURLAuthUsername, password: secretKeyRingFileSourceURLAuthPassword)
        }
        afterEvaluate {
            // always fetch the GPG key before signing archives
            tasks.signArchives.dependsOn fetchSecretKeyRingFile
        }

        modifyPom {
            project {
                name = 'COPPER high-performance workflow engine'
                packaging = 'jar'
                description = 'COPPER is an open-source, powerful, light-weight, and easily configurable workflow engine. The power of COPPER is that it uses Java as a description language for workflows.'
                url 'http://copper-engine.org/'

                scm {
                    url 'https://github.com/copper-engine/copper-engine'
                    connection 'scm:git@github.com:copper-engine/copper-engine.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'copper-team'
                        name = 'Copper Engine Development Team'
                        roles {
                            role 'architect'
                            role 'developer'
                            role 'tester'
                        }
                    }
                }
            }
        }
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }


    afterEvaluate {
        javadoc {
            inputs.property("moduleName", moduleName)
            doFirst {
                if(javaCompatibility >= 9) {
                    options.addStringOption('-module-path', classpath.asPath)
                }
            }
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                def compat = (javaCompatibility <= 8) ? JavaVersion.VERSION_1_8 : JavaVersion.VERSION_1_9
                sourceCompatibility = compat
                targetCompatibility = compat
                if(javaCompatibility <= 8) {
                    sourceSets.main.java.exclude '**/module-info.java'
                } else {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                    ]
                    classpath = files()
                }
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                def compat = (javaCompatibility <= 8) ? JavaVersion.VERSION_1_8 : JavaVersion.VERSION_1_9
                sourceCompatibility = compat
                targetCompatibility = compat
                if(javaCompatibility >= 9) {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'junit,slf4j.log4j12',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                    ]
                    classpath = files()
                }
            }
        }

        test {
            // Due to a Gradle bug we currently have to skip the tests if javaCompatibility >= 9.
            // TODO: remove the line below when the Gradle bug https://github.com/gradle/gradle/issues/4981 gets fixed.
            onlyIf {javaCompatibility <= 8}

            inputs.property("moduleName", moduleName)
            doFirst {
                if(javaCompatibility >= 9) {
                    jvmArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'ALL-MODULE-PATH',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                    ]
                    classpath = files()
                }
            }
        }
    }

    task extractModuleInfoClass {
        doLast {
            copy {
                from zipTree(jar.archivePath)
                include "module-info.class"
                into "${buildDir}/mod-info-tmp"
            }
        }
    }

    task cleanClassesAndLibs {
        doLast {
            delete sourceSets.main.java.outputDir
            delete jar.archivePath
        }
    }

    task insertInfoClass() {
        doLast {
            jar {
                from(file("$buildDir/mod-info-tmp/module-info.class"))
            }.execute()
        }
    }
}

afterEvaluate {
    ['extractModuleInfoClass', 'cleanClassesAndLibs', 'insertInfoClass'].each { taskName ->
        task "${taskName}All"(dependsOn: properSubprojects*."$taskName") { }
    }

    task jarWithJava9(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = 9
        buildFile = './build.gradle'
        tasks = ['clean', 'jar']
    }
    task jarWithJava8(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = 8
        buildFile = './build.gradle'
        tasks = ['cleanClassesAndLibsAll', 'jar']
    }
    task modularJar(dependsOn: [jarWithJava9, extractModuleInfoClassAll,
                                     jarWithJava8, insertInfoClassAll]) {
        group = 'build'
        description = "Assembles a java-8 compatible archive containing the main classes and a java-9 module-info.class"
        extractModuleInfoClassAll.mustRunAfter jarWithJava9
        jarWithJava8.mustRunAfter extractModuleInfoClassAll
        insertInfoClassAll.mustRunAfter jarWithJava8
    }

    task buildWithJava9(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = 9
        buildFile = './build.gradle'
        tasks = ['clean', 'build']
    }
    task buildWithJava8(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = 8
        buildFile = './build.gradle'
        tasks = ['cleanClassesAndLibsAll', 'build']
    }
    task modularBuild(dependsOn: [buildWithJava9, extractModuleInfoClassAll,
                                buildWithJava8, insertInfoClassAll]) {
        group = 'build'
        description = "Assembles and tests this project, creating a java-8 compatible jar that contains a java-9 module-info.class"
        extractModuleInfoClassAll.mustRunAfter buildWithJava9
        buildWithJava8.mustRunAfter extractModuleInfoClassAll
        insertInfoClassAll.mustRunAfter buildWithJava8
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (javaVersion < 9 && (taskGraph.hasTask(jarWithJava9) || taskGraph.hasTask(buildWithJava9))) {
        throw new GradleException("You need a java-9 or newer compiler to execute this task.")
    }
}

configure(rootProject) {
    // The nexus-workflow plugin automates the staging/promotion/release process on Sonatype OSS
    // by providing the task 'nexusStagingRelease'. We perform "nexusStagingRelease" only if the current
    // version is not a SNAPSHOT release.
    apply plugin: 'nexus-workflow'
    tasks.nexusStagingRelease.onlyIf { !version.endsWith("-SNAPSHOT") }

    // task to create source distribution containing all source files
    // note: this task won't run automatically; it must be called explicitely
    task fullSourcesJar(type: Jar) {
        classifier = 'sources-full'
        from project.rootDir
        exclude '**/build/'
        exclude '**/classes/'
        exclude '**/generated/'
        exclude '.gradle/'
        exclude 'tmp/'
        exclude '.idea'
        exclude '**/*.iml'
        exclude '**/*.log'
        exclude '**/*.classpath'
        exclude '**/*.project'
        exclude '**/*.settings/'
    }

    // copy Intellij Codestyle settings each time 'gradle assemble' or 'gradle build' is performed on the root project
    task ideaCodeStyleSetup(type: Copy) {
        from 'common/intellij-codestyle.xml'
        into '.idea/'
        rename '.+', 'codeStyleSettings.xml'
    }
    ideaCodeStyleSetup.onlyIf { file(".idea").exists() }
    assemble.dependsOn ideaCodeStyleSetup
}


project(':projects:copper-jmx-interface') {
    ext.moduleName = 'org.copperengine.management'

    dependencies {
    }
}


project(':projects:copper-regtest') {
    ext.moduleName = 'org.copperengine.regtest'

    sourceSets {
        workflow {
            ext.srcDir = "$projectDir/src/workflow/java"
        }
    }
    sourceSets.test.resources.srcDirs += sourceSets.workflow.srcDir

    dependencies {
        implementation project(':projects:copper-coreengine')
        implementation project(':projects:copper-spring')
        implementation project(':projects:copper-ext')

        implementation "org.springframework:spring-context:$springVersion"
        implementation "org.springframework:spring-tx:$springVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        testRuntimeOnly fileTree(dir: "$rootDir/3rdPartyLibs", include: '*.jar')

        testImplementation 'mysql:mysql-connector-java:5.1.25'
        testImplementation 'org.apache.derby:derby:10.13.1.1'
        testImplementation 'postgresql:postgresql:9.1-901.jdbc4'
        testImplementation 'com.h2database:h2:1.4.193'
        testImplementation "com.mchange:c3p0:$c3p0Version"

        testImplementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
        testImplementation "org.slf4j:slf4j-api:$slf4jVersion"

    }
}

project(':projects:copper-ext') {
    ext.moduleName = 'org.copperengine.ext'
    dependencies {
        implementation project(':projects:copper-coreengine')

        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "commons-io:commons-io:$commonsIoVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "org.yaml:snakeyaml:$snakeyamlVersion"
    	
        testImplementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
        testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    }
}

project(':projects:copper-cassandra:cassandra-storage') {
    ext.moduleName = 'org.copperengine.cassandra.storage'
    dependencies {
        implementation project(':projects:copper-coreengine')
        implementation project(':projects:copper-ext')

        api "com.datastax.cassandra:cassandra-driver-core:$cassandraDriverVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "commons-io:commons-io:$commonsIoVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        implementation 'commons-lang:commons-lang:2.6'
        implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        
        testImplementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
        testImplementation('org.cassandraunit:cassandra-unit:3.1.1.0') {
            exclude module: 'hamcrest-core'
            exclude module: 'hamcrest-library'
            exclude module: 'cassandra-thrift'
            exclude module: 'high-scale-lib'
        }
    }
}

project(':projects:copper-cassandra:cassandra-loadtest') {
    apply plugin:'application'
    ext.moduleName = 'org.copperengine.cassandra.loadtest'

    mainClassName = "org.copperengine.core.persistent.cassandra.loadtest.PermanentLoadCreator"

    dependencies {
        implementation project(':projects:copper-coreengine')
        implementation project(':projects:copper-ext')
        implementation project(':projects:copper-cassandra:cassandra-storage')

        implementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
    }
}


project(':projects:copper-spring') {
    ext.moduleName = 'org.copperengine.spring'
    dependencies {
        implementation project(':projects:copper-coreengine')

        // Spring
        implementation "org.springframework:spring-aop:$springVersion"
        implementation "org.springframework:spring-beans:$springVersion"
        implementation "org.springframework:spring-context:$springVersion"
        implementation "org.springframework:spring-core:$springVersion"
        implementation "org.springframework:spring-expression:$springVersion"
        implementation "org.springframework:spring-jdbc:$springVersion"
        implementation "org.springframework:spring-tx:$springVersion"

        implementation 'org.springframework.batch:spring-batch-infrastructure:2.1.8.RELEASE'
    }
}


project(':projects:copper-coreengine') {
    ext.moduleName = 'org.copperengine.core'
    dependencies {
        api project(':projects:copper-jmx-interface')

        // asm
        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "org.ow2.asm:asm-commons:$asmVersion"
        implementation "org.ow2.asm:asm-tree:$asmVersion"
        implementation "org.ow2.asm:asm-util:$asmVersion"
        implementation "org.ow2.asm:asm-analysis:$asmVersion"

        implementation 'javax.xml.bind:jaxb-api:2.3.0'
        testImplementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
    }

    task scriptsZip(type: Zip) {
        classifier = 'scripts'
        from file("src/main/database")
        into 'scripts/sql'
    }
    assemble.dependsOn scriptsZip

    artifacts {
        archives scriptsZip
    }
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

project(':projects:copper-performance-test') {
    ext.moduleName = 'org.copperengine.performancetest'
    dependencies {
        implementation project(':projects:copper-coreengine')
        implementation project(':projects:copper-ext')
        implementation project(':projects:copper-cassandra:cassandra-storage')

        implementation "com.google.guava:guava:$guavaVersion"
        implementation 'mysql:mysql-connector-java:5.1.39'
        implementation 'org.apache.derby:derby:10.13.1.1'
        implementation 'postgresql:postgresql:9.1-901.jdbc4'
        implementation 'com.h2database:h2:1.4.193'
        implementation "com.mchange:c3p0:$c3p0Version"
        implementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        runtimeOnly fileTree(dir: "$rootDir/3rdPartyLibs", include: '*.jar')
    }
    
	jar {
        dependsOn ':projects:copper-coreengine:jar', ':projects:copper-ext:jar', ':projects:copper-cassandra:cassandra-storage:jar'
	    manifest.attributes provider: 'gradle'

	    archiveName = "copper-performance-test.jar"

	    from {
            configurations.runtime.collect {
                it.isDirectory() ? it : zipTree(it)
            }
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
	    }

	    manifest {
		    attributes 'Main-Class': 'org.copperengine.performancetest.main.Main'
	    }

	}    

}
